// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String
    role          UserRole  @default(USER)
    image        String?
    password      String?
    email         String    @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime?  @updatedAt
    emailVerified DateTime?
    campaigns     Campaign[]
    accounts      Account[]
    donations     Donation[]
    verificationTokens VerificationToken[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Campaign {
    id            String    @id @default(cuid())
    title         String
    description   String
    thumbnail     String
    url           String
    status        CampaignStatus
    target        Int
    startDate    DateTime
    endDate      DateTime
    createdAt     DateTime  @default(now())
    updatedAt     DateTime?  @updatedAt
    donations     Donation[]
    userId        String?
    user          User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}


model Donation {
    id            String    @id @default(uuid())
    status      DonationStatus @default(PENDING)
    amount        Int
    paymentUrl    String
    paymentMethod String?
    paidAt        DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime?  @updatedAt
    expiryDate    DateTime
    campaignId    String
    userId        String
    user          User      @relation(fields: [userId], references: [id])
    campaign      Campaign  @relation(fields: [campaignId], references: [id])
}

model VerificationToken {
    id        String   @id @default(uuid())
    token     String   @unique
    expiresAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

enum CampaignStatus {
    ACTIVE
    INACTIVE
    COMPLETED
}

enum DonationStatus {
    PENDING
    PAID
    CANCELLED
    EXPIRED
}

enum UserRole {
    ADMIN
    USER
}